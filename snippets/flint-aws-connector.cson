##########################################################################
#
#  INFIVERVE TECHNOLOGIES PTE LIMITED CONFIDENTIAL
#  __________________
# 
#  (C) INFIVERVE TECHNOLOGIES PTE LIMITED, SINGAPORE
#  All Rights Reserved.
#  Product / Project: Flint IT Automation Platform
#  NOTICE:  All information contained herein is, and remains
#  the property of INFIVERVE TECHNOLOGIES PTE LIMITED.
#  The intellectual and technical concepts contained
#  herein are proprietary to INFIVERVE TECHNOLOGIES PTE LIMITED.
#  Dissemination of this information or any form of reproduction of this material
#  is strictly forbidden unless prior written permission is obtained
#  from INFIVERVE TECHNOLOGIES PTE LIMITED, SINGAPORE.
 
'.source.ruby':
  'Create AWS instance':
    'prefix': 'call-ec2-create-instance'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","create-instance")                          #Contains the name of the operation (Mandatory)
                               .set("image-id","${2:Amazon Machine Image ID}")                #Unique ID for the Amazon Machine Images (Mandatory)
                               .set("instance-type","${3:Instance Type}")                     #Type of the instance (Mandatory)
                               .set("min-instance",${4:1})                                    #Minimum number of instances to launch (Mandatory)
                               .set("max-instance",${5:1})                                    #Maximum number of instances to launch (Mandatory)
                               .set("region","${6:Amazon EC2 region}")                        #Amazon EC2 region,default region is "us-east-1" (Optional)
                               .set("availability-zone","${7:Amazon EC2 availability zone}")  #Amazon EC2 availability zone,default "us-east-1a" (Optional)
                               .set("key-name","${8:Key pair name}")                          #Key-pair name (Optional)
                               .set("subnet-id","${9:Subnet ID}")                             #Subnet ID for VPC instances (Optional)
                               .set("security-key","${10:Your security key}")                  #Your Amazon EC2 account security key (Optional)
                               .set("access-key","${11:Your secret access key}")               #Your Amazon EC2 account secret access key (Optional)
                               .timeout(10000)                                           #Execution time of the Flintbit in milliseconds (Optional)
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${12:response_exitcode} = ${1:connector_name}_response.exitcode   #Exit status code
${13:response_message} = ${1:connector_name}_response.message     #Execution status message

#AWS-EC2 Connector Response Parameters
${14:instance_info} = ${1:connector_name}_response.get("instance-info")               #Amazon EC2 created instance info set

if ${12:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${12:response_exitcode.to_s}+' | message :: ' + ${13:response_message})
    ${14:instance_info}.each do |${15:instance}|
      @log.info('Amazon EC2 Instance ID :'+${15:instance}.get("instance-id")+' | Instance public IP : ' +${15:instance}.get("public-ip"))
    end
    @output.set("result",${14:instance_info})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${12:response_exitcode.to_s}+' | message :: ' + ${13:response_message})
    @output.set("error",${13:response_message})
end

   """

  'Start AWS instance':
    'prefix': 'call-ec2-start-instance'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")


${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","start-instances")              #Contains the name of the operation (Mandatory)
                               .set("instance_id","${2:Instance ID}")             #Contains one or more instance IDs corresponding to the instances that you want to start (Mandatory)
                               .set("region","${3:Amazon EC2 region}")            #Amazon EC2 region,default region is "us-east-1" (Optional)
                               .set("security-key","${4:Your security key}")      #Your Amazon EC2 account security key
                               .set("access-key","${5:Your secret access key}")   #Your Amazon EC2 account secret access key
                               .timeout(10000)                               #Execution time of the Flintbit in milliseconds
                               .sync


#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode  #Exit status code
${7:response_message} = ${1:connector_name}_response.message    #Execution status message

#Amazon EC2 Connector Response Parameters
${8:instances_set}=${1:connector_name}_response.get("started-instances-set")        #Set of Amazon EC2 started instances

if ${9:response_exitcode} == 0
   @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${6:response_exitcode.to_s}+' | message :: ' + ${7:response_message})

   ${10:instances_set}.each do |${11:instance_id}|
   @log.info("Amazon EC2 Instance current state :'+${11:instance_id}.get('current-state')+' |Instance id :'+${11:instance_id}.get('instance-id')")
   end

else
   @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${12:response_exitcode.to_s}+' | message :: ' + ${13:response_message})
   @output.set("error",${7:response_message})

end

"""

  'Stop AWS instance':
    'prefix': 'call-ec2-stop-instance'
    'body': """

    @log.trace("Calling AWS-EC2 Connector...")


    ${1:connector_name}_response = @call.connector("${1:connector_name}")
                                   .set("action","stop-instances")             #Contains the name of the operation (Mandatory)
                                   .set("instance_id","${2:Instance ID}")           #Contains one or more instance IDs corresponding to the instances that you want to start (Mandatory)
                                   .set("region","${3:Amazon EC2 region}")          #Amazon EC2 region,default region is "us-east-1" (Optional)
                                   .set("security-key","${4:Your security key}")    #Your Amazon EC2 account security key (Optional)
                                   .set("access-key","${5:Your secret access key}") #Your Amazon EC2 account secret access key (Optional)
                                   .timeout(10000)                             #Execution time of the Flintbit in milliseconds (Optional)
                                   .sync


#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode  #Exit status code
${7:response_message} = ${1:connector_name}_response.message    #Execution status message

#Amazon EC2 Connector Response Parameters
${8:instances_set}=${1:connector_name}_response.get("stop-instance-list")    #Set of Amazon EC2 stopped instances



if ${6:response_exitcode} == 0
   @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})

   ${8:instances_set}.each do |${9:instance_id}|
   @log.info("Amazon EC2 Instance current state :'+${9:instance_id}.get('current-state')+' | Instance id :'+${9:instance_id}.get('instance-id')")
   end

else

   @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
   @output.set("error",${7:response_message})

end
"""

  'Terminate AWS instance':
    'prefix': 'call-ec2-terminate-instance'
    'body': """

    @log.trace("Calling AWS-EC2 Connector...")

    ${1:connector_name}_response = @call.connector("${1:connector_name}")
                                   .set("action","terminate-instances")       #Contains the name of the operation
                                   .set("instance_id","${2:Instance ID}")          #Contains one or more instance IDs corresponding to the instances that you want to start
                                   .set("region","${3:ap-southeast-1}")            #Amazon EC2 region,default region is "us-east-1"
                                   .set("security-key","${4:Your security key}")   #Your Amazon EC2 account security key
                                   .set("access-key","${5:Your access key}")       #Your Amazon EC2 account secret access key
                                   .timeout(10000)                            #Execution time of the Flintbit in milliseconds
                                   .sync


#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode   #Exit status code
${7:response_message} = ${1:connector_name}_response.message     #Execution status message

#Amazon EC2 Connector Response Parameters
${8:instances_set}=${1:connector_name}_response.get("terminated-instance-set")   #Set of Amazon EC2 terminated instances


if ${6:response_exitcode} == 0
   @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})

   ${8:instances_set}.each do |${9:instance_id}|

   @log.info("Amazon EC2 Instance current state :'+${9:instance_id}.get('current-state')+' | Instance id :'+${9:instance_id}.get('instance-id')")

   end

else

   @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
   @output.set("error",${7:response_message})

end


"""

  'Reboot AWS instance':
    'prefix': 'call-ec2-reboot-instance'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")

${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","reboot-instances")           #Contains the name of the operation
                               .set("instance_id","${2:Instance ID}")           #Contains one or more instance IDs corresponding to the instances that you want to start
                               .set("region","${3:Amazon EC2 region}")          #Amazon EC2 region,default region is "us-east-1"
                               .set("security-key","${4:Your security key}")    #Your Amazon EC2 account security key
                               .set("access-key","${5:Your secret access key}") #Your Amazon EC2 account secret access key
                               .timeout(10000)                             #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode  #Exit status code
${7:response_message} = ${1:connector_name}_response.message    #Execution status message

#Amazon EC2 Connector Response Parameters
${8:instances_set}=response.get("reboot-instance-id")   #Set of Amazon EC2 rebooted instances

if ${6:response_exitcode} == 0
   @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})

    ${8:instances_set}.each do |${9:instance_id}|
       @log.info('Amazon EC2 rebooted instance : '+${9:instance_id.to_s})
    end
else
   @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
   @output.set("error",${7:response_message})

end
"""

  'Describe aws instance':
    'prefix':'call-ec2-describe-instance'
    'body': """

    @log.trace("Calling AWS-EC2 Connector...")

    ${1:connector_name}_response = @call.connector("${1:connector_name}")
                                   .set("action","describe-instances")         #Contains the name of the operation (Mandatory)
                                   .set("instance_id","${2:Instance ID}")           #Contains one or more instance IDs corresponding to the instances that you want to start (Mandatory)
                                   .set("region","${3:ap-southeast-1}")             #Amazon EC2 region,default region is "us-east-1" (Optional)
                                   .set("security-key","${4:Your security key}")    #Your Amazon EC2 account security key
                                   .set("access-key","${5:Your secret access key}") #Your Amazon EC2 account secret access key
                                   .timeout(10000)                             #Execution time of the Flintbit in milliseconds
                                   .sync


#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode  #Exit status code
${7:response_message} = ${1:connector_name}_response.message    #Execution status message

#Amazon EC2 Connector Response Parameters
${8:instances_info}=${1:connector_name}_response.get("instances-info")   #Set of Amazon EC2 instances

if ${6:response_exitcode} == 0
   @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
       ${8:instances_info}.each do |${9:instance}|
          #To get more Information about instance please refer Flint documentation
          @log.info('Amazon EC2 instance image id : '+${9:instance}.get("image-id")+' | public ip : '+${9:instance}.get("public-ip"))
       end
else
   @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
   @output.set("error",${7:response_message})
end
"""

  'List aws instance':
    'prefix':'call-ec2-list-instance'
    'body': """
    @log.trace("Calling AWS-EC2 Connector...")

    ${1:connector_name}_response = @call.connector("${1:connector_name}")
                                   .set("action","list")                     #Contains the name of the operation
                                   .set("region","${2:ap-southeast-1}")             #Amazon EC2 region,default region is "us-east-1"
                                   .set("security-key","${3:Your security key}")    #Your Amazon EC2 account security keysecret access key
                                   .set("access-key","${4:Your secret access key}") #Your Amazon EC2 account secret access key
                                   .timeout(10000)                           #Execution time of the Flintbit in milliseconds
                                   .sync

#AWS-EC2 Connector Response Meta Parameters
${5:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${6:response_message} = ${1:connector_name}_response.message #Execution status message

#Amazon EC2 Connector Response Parameters
${7:instances_list}=${1:connector_name}_response.get("instance-list")

if ${6:response_exitcode} == 0
   @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})

   ${7:instances_list}.each do |${8:instance_id}|
         @log.info('Amazon EC2 instance : '+ ${8:instance_id.to_s})
   end
else
   @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
   @output.set("error",${7:response_message})
end

"""


  'Create Tags Operation':
    'prefix':'call-ec2-create-tags'
    'body':"""
      @log.trace("Calling AWS-EC2 Connector...")
       ${1:connector_name}_response = @call.connector("${1:connector_name}")
                                   .set("action","create-tags")                     #Contains the name of the operation
                                   .set("resource-id","${2:Resource ID}")
                                   .set("tag-key","${3:AWS tag key}")
                                   .set("tag-value","${4:Windows AMI}")
                                   .set("region","${5:ap-southeast-1}")                  #Amazon EC2 region,default region is "us-east-1"(Optional)
                                   .set("security-key","${6:Your secret security key}")  #Your security key (Optional)
                                   .set("access-key","${7:Your secret access key}")      #Your secret access key (Optional)
                                   .timeout(100000)                                 #Execution time of the Flintbit in milliseconds (Optional)
                                   .sync

      #Amazon EC2 Connector Response Meta Parameters
       ${8:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
       ${9:response_message} = ${1:connector_name}_response.message   #Execution status messages
      if ${8:response_exitcode} == 0

         @log.info('Success in executing AWS-EC2 Connector where, exitcode :: '+ ${8:response_exitcode.to_s}+' | message :: '+ ${9:response_message})

      else

         @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+ ${8:response_exitcode.to_s}+' | message :: ' + ${9:response_message})
         @output.set("error",${9:response_message})

      end

    """

  'Delete Tags Operations':
    'prefix':'call-ec2-delete-tags'
    'body':"""
      @log.trace("Calling AWS-EC2 Connector...")
      ${1:connector_name}_response = @call.connector("${1:connector_name}")
                                   .set("action","delete-tags")                      #Contains the name of the operation
                                   .set("resource-id","${2:Resource ID}")
                                   .set("tag-key","${3:AWS tag key}")
                                   .set("tag-value","${4:Windows AMI}")
                                   .set("region","${5:ap-southeast-1}")                  #Amazon EC2 region,default region is "us-east-1" (Optional)
                                   .set("security-key","${6:Your secret security key}")  #Your security key (Optional)
                                   .set("access-key","${7:Your secret access key}")      #Your secret access key (Optional)
                                   .timeout(10000)                                  #Execution time of the Flintbit in milliseconds (Optional)
                                   .sync

    #Amazon EC2 Connector Response Meta Parameters
       ${8:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
       ${9:response_message} = ${1:connector_name}_response.message   #Execution status messages
      if ${8:response_exitcode} == 0

         @log.info('Success in executing AWS-EC2 Connector where, exitcode :: '+ ${8:response_exitcode.to_s}+' | message :: '+ ${9:response_message})
      else

         @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+ ${8:response_exitcode.to_s}+ ' | message :: '+ ${9:response_message})
         @output.set("error",${9:response_message})

      end

    """
  'Describe Tags Operation':
    'prefix':'call-ec2-describe-tags'
    'body':"""
       @log.trace("Calling AWS-EC2 Connector...")
      ${1:connector_name}_response = @call.connector("${1:connector_name}")
                                   .set("action","describe-tags")                      #Contains the name of the operation
                                   .set("resource-id","${2:Resource ID}")
                                   .set("resource-type", "${3:Image}")
                                   .set("region","${4:ap-southeast-1}")                     #Amazon EC2 region,default region is "us-east-1"(Optional)
                                   .set("security-key","${5:Your secret security key }")  #Your secret security  key(Optional)
                                   .set("access-key","${6:Your access key}")                #Your access key (Optional)
                                   .timeout(10000)                                     #Execution time of the Flintbit in milliseconds(Optional)
                                   .sync

    #Amazon EC2 Connector Response Meta Parameters
       ${7:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
       ${8:response_message} = ${1:connector_name}_response.message   #Execution status messages
      if ${7:response_exitcode} == 0

         @log.info('Success in executing AWS-EC2 Connector where, exitcode :: '+ ${7:response_exitcode.to_s}+' | message :: '+ ${8:response_message})

      else

         @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+  ${7:response_exitcode.to_s}+' | message :: '+${8:response_message})
         @output.set("error",${8:response_message})

      end

    """


  'Describe address operation':
    'prefix':'call-ec2-describe-address'
    'body':"""
    @log.trace("Calling AWS-EC2 Connector...")

    ${1:connector_name}_response = @call.connector("${1:connector_name}")
                                   .set("action","describe-addresses")				 #Contains the name of the operation
                                   .set("public-ip","${2:Your public ip}") 		     #Your Amazon EC2 elastic public ip
                                   .set("region","${3:Amazon EC2 region}")		      #Amazon EC2 region,default region is "us-east-1"
                                   .set("security-key","${4:Your security key}")		#Your Amazon EC2 account security key
                                   .set("access-key","${5:Your secret access key}") #Your Amazon EC2 account secret access key
                                   .timeout(10000)                             #Execution time of the Flintbit in milliseconds
                                   .sync

    #Amazon EC2 Connector Response Meta Parameters
    ${6:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
    ${7:response_message} = ${1:connector_name}_response.message   #Execution status messages

    if ${6:response_exitcode} == 0
		   @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
         ${8:public_ips_set} = response.get("public-ips-set")  #set of public IP of amazon EC2 account
         @log.info('Amazon EC2 Public IP set : '+ ${9:instance_ip.to_s})
    else
        @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: ' +${7:response_message})
        @output.set("error",${7:response_message})
    end


"""



  'Create Security Group':
    'prefix': 'call-ec2-create-security-group'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","create-security-group") 			    #Contains the name of the operation
                               .set("region","${2:Amazon EC2 region}") 							 #Amazon EC2 region in which group is to be created,default is "us-east-1"
                               .set("group-name","${3:Your Security Group name}") 	 #Name with which group is to be created
                               .set("group-description","${4:Test security group}")  #Description of group
                               .set("security-key","${5:Your security key}")  			 #Your Amazon EC2 security key
                               .set("access-key","${6:Your secret access key}")  	  #Your secret access key
                               .timeout(10000) 													       #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${7:response_exitcode} = ${1:connector_name}_response.exitcode  #Exit status code
${8:response_message} = ${1:connector_name}_response.message    #Execution status message

#AWS-EC2 Connector Response Parameters
${9:group_id} = ${1:connector_name}_response.get("group-id") #Group id of Amazon EC2 Security group

if ${7:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${7:response_exitcode.to_s}+' | message :: ' +${8:response_message})
    @log.info('Created Amazon EC2 Group with ID :' + ${9:group_id})
    @output.set("result",${9:group_id})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${7:response_exitcode.to_s}+' | message :: ' +${8:response_message})
    @output.set("error",${8:response_message})
end

   """

   'Describe Security Group':
    'prefix': 'call-ec2-describe-security-group'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","create-security-group") 		  #Contains the name of the operation
                               .set("region","${2:Amazon EC2 region}") 				   #Amazon EC2 region in which group lies,default is "us-east-1"
                               .set("group-name","${3:Name of Security group}")  #Name of group to be described
                               .set("security-key","${4:Your security key}")     #Your security key
                               .set("access-key","${5:Your secret access key}")  #Your secret access key
                               .timeout(10000)                              #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${7:response_message} = ${1:connector_name}_response.message #Execution status message

#AWS-EC2 Connector Response Parameters
${8:security_group_info} = ${1:connector_name}_response.get("security-group-info")  #Set of Amazon EC2 security groups details

if ${7:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' +${6:response_exitcode.to_s}+' | message :: ' +${7:response_message})
    
		${8:security_group_info}.each do |${9:group_info}|
			#To get more Information about Group please refer Flint documentation of AWS-EC2 Connector
    	@log.info('Amazon EC2 Security group name : '+${9:group_info}.get("group-name"))
			@log.info('group description :' +${9:group_info}.get("group-description")+ ' | group ID :' + ${9:group_info}.get("group-id"))
		end
    	@output.set("result",${8:security_group_info})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' +${6:response_exitcode.to_s}+' | message :: ' +${7:response_message})
    @output.set("error",${8:response_message})
end

   """

   'Delete Security Group':
    'prefix': 'call-ec2-delete-security-group'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","delete-security-group")           #Contains the name of the operation
                               .set("region","${2:Amazon EC2 region}")               #Amazon EC2 region in which group lies,default is "us-east-1"
                               .set("group-name","${3:Name of group}")               #Name of security group to be deleted
                               .set("security-key","${4:Your security key}")         #Your Amazon EC2 account security key
                               .set("access-key","${5:Your secret access key}")      #Your Amazon EC2 account secret access key
                               .timeout(10000)                                  #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${7:response_exitcode} = ${1:connector_name}_response.exitcode  #Exit status code
${8:response_message} = ${1:connector_name}_response.message    #Execution status message

#AWS-EC2 Connector Response Parameters
${9:group_id} = ${1:connector_name}_response.get("group-id")   #Group id of Amazon EC2 Security group

if ${7:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${7:response_exitcode.to_s}+' | message :: '+${8:response_message})
    @log.info('Created Amazon EC2 Group with ID :' + ${9:group_id})
    @output.set("result",${9:group_id})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${7:response_exitcode.to_s}+' | message :: '+${8:response_message})
    @output.set("error",${8:response_message})
end

   """

  'Allocate Address':
    'prefix': 'call-ec2-allocate-address'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","allocate-address")            #Contains the name of the operation
                               .set("region","${2:Amazon EC2 region}")           #Amazon EC2 region in which address is to be allocated,default is "us-east-1"
                               .set("security-key","${3:Your security key}")     #Your security key
                               .set("access-key","${4:Your secret access key}")  #Your secret access key
                               .timeout(10000)                              #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${5:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${6:response_message} = ${1:connector_name}_response.message   #Execution status message

#AWS-EC2 Connector Response Parameters
${7:public_ip} = ${1:connector_name}_response.get("public-ip") #Allocated Public IP of Amazon EC2

if ${5:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${5:response_exitcode.to_s}+' | message :: ' +${6:response_message})
    @log.info('Allocated address :'+${7:public_ip})
    @output.set("result",${7:public_ip})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${5:response_exitcode.to_s}+' | message :: ' +${6:response_message})
    @output.set("error",${6:response_message})
end

"""

   'Release Address':
    'prefix': 'call-ec2-release-address'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","release-address")            #Contains the name of the operation
                               .set("public-ip","${2:Public IP}")               #Address which is to be released
                               .set("region","${3:Amazon EC2 region}")          #Amazon EC2 region to which address was allocated,default is "us-east-1"
                               .set("security-key","${4:Your security key}")    #Your Amazon EC2 account security key
                               .set("access-key","${5:Your secret access key}") #Your Amazon EC2 account secret access key
                               .timeout(10000)                             #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${7:response_message} = ${1:connector_name}_response.message #Execution status message

if ${6:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: ' +${7:response_message})
    @output.set("result",${7:response_message})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
    @output.set("error",${7:response_message})
end

   """

   'Associate Address':
    'prefix': 'call-ec2-associate-address'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","associate-address")           #Contains the name of the operation
                               .set("instance-id","${2:i-a1b2c3}")               #Instance to which address has to be associated
                               .set("public-ip","${3:public ip}")                #Address which is to be associated with the specified instance
                               .set("region","${4:Amazon EC2 region}")           #Amazon EC2 region in which instance lies,default is "us-east-1"
                               .set("security-key","${5:Your security key}")     #Your Amazon EC2 account security key
                               .set("access-key","${6:Your secret access key}")  #Your Amazon EC2 account secret access key
                               .timeout(10000)                              #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${7:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${8:response_message} = ${1:connector_name}_response.message #Execution status message

if ${7:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${7:response_exitcode.to_s}+' | message :: '+${8:response_message})
    @output.set("result",${8:response_message})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${7:response_exitcode.to_s}+' | message :: '+${8:response_message})
    @output.set("error",${8:response_message})
end

   """

   'Disassociate Address':
    'prefix': 'call-ec2-disassociate-address'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}")
                               .set("action","disassociate-address")       #Contains the name of the operation
                               .set("public-ip","${2:Public IP}")               #Address which is to be disassociated
                               .set("region","${3:Amazon EC2 region}")          #Amazon EC2 region to which address associated,default is "us-east-1"
                               .set("security-key","${4:Your security key}")    #Your security key
                               .set("access-key","${5:Your secret access key}") #Your secret access key
                               .timeout(10000)                             #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${7:response_message} = ${1:connector_name}_response.message #Execution status message

if ${6:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
    @output.set("result",${7:response_message})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::'+${6:response_exitcode.to_s}+' | message :: '+${7:response_message})
    @output.set("error",${7:response_message})
end

   """
