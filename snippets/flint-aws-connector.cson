'.source.ruby':
  'Create AWS instance':
    'prefix': 'connaws-create-instance'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}") 
                               .set("action","create-instance") #Contains the name of the operation 
                               .set("image-id","${2:ami-1a2b3c}") #Unique ID for the Amazon Machine Images,Mandatory               
                               .set("instance-type","${3:m1.small}") #Type of the instance,Mandatory                               
                               .set("min-instance",${4:1})  #Minimum number of instances to launch,Mandatory
                               .set("max-instance",${5:1})  #Maximum number of instances to launch,Mandatory
                               .set("region","${6:ap-southeast-1}")  #Amazon EC2 region,default region is "us-east-1"
                               .set("availability-zone","${7:ap-southeast-1a}")  #Amazon EC2 availability zone,default "us-east-1a"
                               .set("key-name","${8:flint-test}")  #Key-pair name
                               .set("subnet-id","${9:subnet-4d3c2b1a}")  #Subnet ID for VPC instances
                               .set("security-key","${10:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your security key
                               .set("access-key","${11:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your secret access key
                               .timeout(10000) #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${12:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${13:response_message} = ${1:connector_name}_response.message #Execution status message

#AWS-EC2 Connector Response Parameters
${14:instance_info} = response.get("instance-info") #Amazon EC2 created instance info set

if ${12:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${12:response_exitcode} 
                                                        +' | message :: ' + ${13:response_message})
    ${14:instance_info}.each do |${15:instance}|
    @log.info('Amazon EC2 Instance ID :' + ${15:instance}.get("instance-id") + ' |  
                          Instance Type :' + ${15:instance}.get("instance-type") +' | 
                          Instance public IP : ' + ${15:instance}.get("public-ip") +' | 
                          Instance private IP : ' + ${15:instance}.get("private-ip")} )
    @output.set("result",${14:instance_info})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' + ${12:response_exitcode}
                                                         +' | message :: ' + ${13:response_message})
    @output.set("error",${13:response_message})
end

   """
  
  'Create Security Group':
    'prefix': 'connaws-create-security-group'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}") 
                               .set("action","create-security-group") #Contains the name of the operation 
                               .set("region","${2:ap-southeast-1}") #Amazon EC2 region in which group is to be created,default is "us-east-1"              
                               .set("group-name","${3:flint-test}") #Name with which group is to be created                               
                               .set("group-description","${4:Test security group}")  #Description of group
                               .set("security-key","${5:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your security key
                               .set("access-key","${6:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your secret access key
                               .timeout(10000) #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${7:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${8:response_message} = ${1:connector_name}_response.message #Execution status message

#AWS-EC2 Connector Response Parameters
${9:group_id} = response.get("group-id") #Group id of Amazon EC2 Security group

if ${7:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${7:response_exitcode} 
                                                        +' | message :: ' + ${8:response_message})
    @log.info('Created Amazon EC2 Group with ID :' + ${9:group_id})
    @output.set("result",${9:group_id})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' + ${7:response_exitcode}
                                                         +' | message :: ' + ${8:response_message})
    @output.set("error",${8:response_message})
end

   """

   'Describe Security Group':
    'prefix': 'connaws-describe-security-group'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}") 
                               .set("action","create-security-group") #Contains the name of the operation 
                               .set("region","${2:ap-southeast-1}") #Amazon EC2 region in which group lies,default is "us-east-1"              
                               .set("group-name","${3:flint-test}") #Name of group to be described                               
                               .set("security-key","${4:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your security key
                               .set("access-key","${5:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your secret access key
                               .timeout(10000) #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${7:response_message} = ${1:connector_name}_response.message #Execution status message

#AWS-EC2 Connector Response Parameters
${8:security_group_info} = response.get("security-group-info")  #Set of Amazon EC2 security groups details

if ${7:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${6:response_exitcode} 
                                                        +' | message :: ' + ${7:response_message})
    ${8:security_group_info}.each do |${9:group_info}|
    @log.info('Amazon EC2 Security group owner ID :' ${9:group_info}.get("owner-id")
                             + ' | group name : ' + ${9:group_info}.get("group-name")
                             + ' | group description :' + ${9:group_info}.get("group-description")
                             + ' | group vpc ID :' + ${9:group_info}.get("vpc-id")
                             + ' | group ID :' + ${9:group_info}.get("group-id")
                             + ' | group IP Permissions Egress :' + ${9:group_info}.get("ip-permissions-egress")
                             + ' | group Tags :' + ${9:group_info}.get("tags")
                             + ' | group IP Permissions :' + ${9:group_info}.get("ip-permissions")')
    @output.set("result",${8:security_group_info})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' + ${6:response_exitcode}
                                                         +' | message :: ' + ${7:response_message})
    @output.set("error",${8:response_message})
end

   """

   'Delete Security Group':
    'prefix': 'connaws-delete-security-group'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}") 
                               .set("action","delete-security-group") #Contains the name of the operation 
                               .set("region","${2:ap-southeast-1}") #Amazon EC2 region in which group lies,default is "us-east-1"              
                               .set("group-name","${3:flint-test}") #Name of group to be deleted                                  
                               .set("security-key","${4:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your security key
                               .set("access-key","${5:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your secret access key
                               .timeout(10000) #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${7:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${8:response_message} = ${1:connector_name}_response.message #Execution status message

#AWS-EC2 Connector Response Parameters
${9:group_id} = response.get("group-id") #Group id of Amazon EC2 Security group

if ${7:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${7:response_exitcode} 
                                                        +' | message :: ' + ${8:response_message})
    @log.info('Created Amazon EC2 Group with ID :' + ${9:group_id})
    @output.set("result",${9:group_id})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' + ${7:response_exitcode}
                                                         +' | message :: ' + ${8:response_message})
    @output.set("error",${8:response_message})
end

   """

  'Allocate Address':
    'prefix': 'connaws-allocate-address'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}") 
                               .set("action","allocate-address") #Contains the name of the operation 
                               .set("region","${2:ap-southeast-1}") #Amazon EC2 region in which address is to be allocated,default is "us-east-1"             
                               .set("security-key","${3:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your security key
                               .set("access-key","${4:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your secret access key
                               .timeout(10000) #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${5:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${6:response_message} = ${1:connector_name}_response.message #Execution status message

#AWS-EC2 Connector Response Parameters
${7:public_ip} = response.get("public-ip") #Allocated Public IP of Amazon EC2

if ${5:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${5:response_exitcode} 
                                                        +' | message :: ' + ${6:response_message})
    @log.info('Allocated address :' + ${7:public_ip})
    @output.set("result",${7:public_ip})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' + ${5:response_exitcode}
                                                         +' | message :: ' + ${6:response_message})
    @output.set("error",${6:response_message})
end

   """

   'Release Address':
    'prefix': 'connaws-release-address'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}") 
                               .set("action","release-address") #Contains the name of the operation 
                               .set("public-ip",${2:"192.168.45.45"}) #Address which is to be released
                               .set("region","${3:ap-southeast-1}") #Amazon EC2 region to which address was allocated,default is "us-east-1"             
                               .set("security-key","${4:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your security key
                               .set("access-key","${5:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your secret access key
                               .timeout(10000) #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${7:response_message} = ${1:connector_name}_response.message #Execution status message

if ${6:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${6:response_exitcode} 
                                                        +' | message :: ' + ${7:response_message})
    @output.set("result",${7:response_message})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' + ${6:response_exitcode}
                                                         +' | message :: ' + ${7:response_message})
    @output.set("error",${7:response_message})
end

   """

   'Associate Address':
    'prefix': 'connaws-associate-address'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}") 
                               .set("action","associate-address") #Contains the name of the operation 
                               .set("instance-id","${2:i-a1b2c3}") #Instance to which address has to be associated
                               .set("public-ip",${3:"192.168.45.45"}) #Address which is to be associated with the specified instance                               
                               .set("region","${4:ap-southeast-1}") #Amazon EC2 region in which instance lies,default is "us-east-1"             
                               .set("security-key","${5:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your security key
                               .set("access-key","${6:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your secret access key
                               .timeout(10000) #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${7:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${8:response_message} = ${1:connector_name}_response.message #Execution status message

if ${7:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${7:response_exitcode} 
                                                        +' | message :: ' + ${8:response_message})
    @output.set("result",${8:response_message})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' + ${7:response_exitcode}
                                                         +' | message :: ' + ${8:response_message})
    @output.set("error",${8:response_message})
end

   """

   'Disassociate Address':
    'prefix': 'connaws-disassociate-address'
    'body': """

@log.trace("Calling AWS-EC2 Connector...")
${1:connector_name}_response = @call.connector("${1:connector_name}") 
                               .set("action","disassociate-address") #Contains the name of the operation 
                               .set("public-ip",${2:"192.168.45.45"}) #Address which is to be disassociated                               
                               .set("region","${3:ap-southeast-1}") #Amazon EC2 region to which address was associated,default is "us-east-1"             
                               .set("security-key","${4:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your security key
                               .set("access-key","${5:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}")  #Your secret access key
                               .timeout(10000) #Execution time of the Flintbit in milliseconds
                               .sync

#AWS-EC2 Connector Response Meta Parameters
${6:response_exitcode} = ${1:connector_name}_response.exitcode #Exit status code
${7:response_message} = ${1:connector_name}_response.message #Execution status message

if ${6:response_exitcode} == 0
    @log.info('Success in executing AWS-EC2 Connector where, exitcode ::' + ${6:response_exitcode} 
                                                        +' | message :: ' + ${7:response_message})
    @output.set("result",${7:response_message})
else
    @log.error('Failure in executing AWS-EC2 Connector where, exitcode ::' + ${6:response_exitcode}
                                                         +' | message :: ' + ${7:response_message})
    @output.set("error",${7:response_message})
end

   """









