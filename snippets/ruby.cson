#
#  INFIVERVE TECHNOLOGIES PTE LIMITED CONFIDENTIAL
#  _______________________________________________
# 
#  (C) INFIVERVE TECHNOLOGIES PTE LIMITED, SINGAPORE
#  All Rights Reserved.
#  Product / Project: Flint IT Automation Platform
#  NOTICE:  All information contained herein is, and remains
#  the property of INFIVERVE TECHNOLOGIES PTE LIMITED.
#  The intellectual and technical concepts contained
#  herein are proprietary to INFIVERVE TECHNOLOGIES PTE LIMITED.
#  Dissemination of this information or any form of reproduction of this material
#  is strictly forbidden unless prior written permission is obtained
#  from INFIVERVE TECHNOLOGIES PTE LIMITED, SINGAPORE.


# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'.source.ruby':
  'Flintbit Template':
    'prefix': 'flintbit'
    'body': """
        # get input from REST JSON or XML
        ${1:variable_name1} = @input.get("${2:name or json path}")
        ${3:variable_name2} = @input.get("${4:name or json path}")

        #Call a connector syncronously and set arguments
        response = @call.connector("${5:connector name}").set("key","value").sync

        # check response from connector. '0' means success
        if response.exitcode == 0
          # get connector output
          out = response.get("output")

          # set connector output in REST response
          @output.set("${6:connector_output}",out)
        else
          # log the error
          @log.error("Connector call failed")
          # exit the flintbit
          @output.exit(1,"Connector call failed")
        end

        #Call another flintbit syncronously and set arguments
        bit_response = @call.bit("${7:example:hello.rb}").set("key","value").sync
        if bit_response.exitcode == 0
          ${8:name} = bit_response.get("name")
          # set flintbit output in REST response
          @output.set("${8:name}",${8:name})
        else
          # log the error
          @log.error("Flintbit call failed")
          # exit the flintbit
          @output.exit(1,"Flintbit call failed")
        end
    """
  'Get Input':
    'prefix': 'input'
    'body': '${1:variable} = @input.get("${1:name or json path}")'

  'Set Output':
    'prefix': 'output'
    'body': '@output.set("${1:name}",${1:value or variable})'

  'info':
    'prefix':'loginfo'
    'body':'@log.info("${1:Information Statement}")'

  'error':
    'prefix':'logerror'
    'body':'@log.error("${1:Error Statment}")'

  'warn':
    'prefix':'logwarn'
    'body':'@log.warn("${1:Warning Statment}")'

  'debug':
    'prefix':'logdebug'
    'body':'@log.debug("${1:Debug Statement}")'

  'Call flintbit':
    'prefix' : 'call-flintbit'
    'body' : """
      # Call flintbit synchronously and set arguments
      ${1:flintbit}_response = @call.bit("${2:example:hello.rb}")         # Provide path for flintbit
                            .set("${3:message}","${4:Welcome to Flint!}") # Set arguments
                            .sync                               # To call flintbit asynchronously use .async instead of .sync
    """
  'Get input using path':
    'prefix' : 'input-path'
    'body' : """
      ${1:name} = @input.path("$.${1:name}") # It will return you values of parameters/elements depending on the JSON/XML
    """

  'Get raw input':
    'prefix' : 'input-raw'
    'body' : """
        ${1:raw}_input = @input.raw() # It returns a string representation of your JSON/XML input.
      """

  'Set raw output':
    'prefix' : 'output-raw'
    'body' : """
      @output.setraw("${1:my-details}",'${2:{"name":"tom"}}') # Set JSON object in output
    """

  'Get global config':
    'prefix' : 'config-global'
    'body' : '${1:path} = @config.global("${2:config_name.path}") # It gives value for path field from config_name'

  'Get local config':
    'prefix' : 'config-local'
    'body' : '${1:path} = @config.local("${2:config_name.path}") # It gives value for path field from config_name'

  'Parse json string':
    'prefix' : 'parse-json'
    'body' : """
      name = @util.json('${1:{"name":"tom"}}').get("${2:name}") # The value of JSON parameter name i.e tom will be retrieved.
    """

  'Parse xml string':
    'prefix' : 'parse-xml'
    'body' : """
      name = @util.xml("${1:<info><name>tom</name></info>}").path("${2:/info/name/text()}") # The value of XML parameter name i.e tom will be retrieved.
    """
